---
title: "Intro to Data Analysis in R - Sorting and Filtering"
author: "Aaron Kessler"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load the packages we'll need
# Remember, think of this like packing for our trip
# (We don't take the whole closet, only what we need)
library(tidyverse)
library(lubridate)
library(nycflights13)

```

In R, data tables are known as dataframes.
What are "tibbles"...? 
They're dataframes, with some additional tidyverse-infused features. Returns more readable output in the console, etc.


sample data on flights in and out of NYC's three airports - included in the package we loaded above
```{r}
flightdata <- nycflights13::flights

flightdata

```

What's with that arrow? Let's explain. It's how you "assign" a stored value in R. How you save something with a name of your choosing, instead of just spit it out to the current window itself in the R session.

We can also return just the few rows using head()
```{r}

head(flightdata)
```
We can also see a vertical list of all the columns using glimpse()
```{r}

glimpse(flightdata)
```


## Filtering and Sorting

Lot of data here, so let's talk about how we can use the tidyverse package's
functions to filter and sort our data, just like you may be used to in other
tools like Excel, SQL or other methods.

```{r}
#Show me only the flights going to Sarasota, Florida (SRQ) 
filter(flightdata, dest == "SRQ")

```


```{r}
#For numeric values, you can use boolean operators 

filter(flightdata, month <= 3)
```


```{r}
#Now, let's try filtering based on two different variables

filter(flightdata, dest == "SRQ", month <= 3)
#note the comma separating the filtering terms
```


```{r}
#This can still get a little confusing once you wind up with larger amounts of steps to string together.  
#  
#Enter a glorious feature of the tidyverse: **the PIPE** `%>%`  
#   
#The "pipe" (shortcut is CTRL/CMD + SHIFT + M) allows you to chain together commands  
#  
#Watch this, and see how much easier it becomes for a human to think through (and read later!)

flightdata %>% 
  filter(dest == "SRQ")
```


```{r}
#Voila! So what just happened there?  
#  
#Think of %>% as the equivalent of "and then do this"...  
##It takes the result and then applies something new to it, in sequential order  
#  

#This becomes easier to see when we add new functions - so let's talk about sorting with arrange()
```


```{r}
pollution %>% 
  arrange(amount)
```


```{r}
#To sort by highest value, add desc()

pollution %>% 
  arrange(desc(amount))
```


```{r}
#Now let's go back to our filtering and add arranging, too

pollution %>% 
  filter(size == "large") %>% 
  arrange(desc(amount))
```


```{r}
#Add another filter criteria

pollution %>% 
  filter(size == "large", amount < 100) %>% 
  arrange(desc(amount))
```


```{r}
#This can be formatted this way as well, if it's even easier for you to read  
#Let's add another filter criteria

pollution %>% 
  filter(size == "large", 
         amount < 100) %>% 
  arrange(desc(amount))
```


```{r}
#Think about what we just did here.  
#  
#You can read the code and it intuitively makes sense. 
#Each step sequentially listed and executes in order.  
#  
#  

# One more thing - what if we don't want all the columns? Just some.  
# This happens all the time.
# 
# Dplyr makes this easy using **select()`**
#
```


```{r}
pollution %>% 
  select(city, amount)
```


```{r}
# You can pull out just certain variables as well  
# This results in the same thing as above

pollution %>% 
  select(-size)
```


```{r}
#### PRESIDENTIAL CANDIDATE TRIPS  
#  
# Let's take a look at some more intersting data now and try out some of these methods  
#   
# Load in data of prez candidate campaign trips between midterms and end of Jan

events <- readRDS("events_saved.rds")

# Let's take a look at what we've got

events

# Even easier to see a dataset with `View()`  
# Click on its name under the environment tab in upper right, or:

View(events)

# Can also pipe the results of a chain if we wanted to

events %>% 
  view()


# Can you think of when we might find ourselves wanting to do that? (hint: think big datasets)  
#   
# Now let's try out some of our filtering and arranging techniques.  
#   
# Show all events in Iowa:

events %>% 
  filter(state == "IA")

# Has Kamala Harris been to Iowa?

events %>% 
  filter(state == "IA",
         cand_lastname == "Harris")

# What about another candidate

events %>% 
  filter(state == "IA",
         cand_lastname == "Gillibrand")

# Let's talk about **date-specific** stuff.    
# If I have a properly formatted date in a dataframe, can I sort by it? *Yes.*

events %>% 
  filter(state == "IA") %>% 
  arrange(desc(date))

# What if I want to pull out only certain ranges of dates? *Several approaches.*   

# Specifiying a specific date using as.Date()

events %>% 
  filter(date < as.Date("2018-12-31"))

# Take advantage of the LUBRIDATE package - a tidyverse package specifically for dates  
# *Note: lubridate needs to be called separately at the top with library(lubridate) - it doesn't yet load with library(tidyverse)*    
#   
  
# Now watch what we can do:

events %>% 
  filter(year(date) == 2018)

# Just events in January 2019

events %>% 
  filter(year(date) == 2019,
         month(date) == 1)

# Events earlier than Dec 2018

events %>% 
  filter(year(date) == 2018,
         month(date) < 12)

# Also allows us to do things like, "I only want to see events the *first week of every month*" 

events %>% 
  filter(day(date) <= 7)

# Who's visiting Iowa the first week of a month? 

events %>% 
  filter(day(date) <= 7,
         state == "IA")

#  
# This is helpful but let's say you're doing this all the time.  
# It may be easier to create new columns to hold these values.
#     
# Next week we'll discuss how to do that with dpylr/tidyverse - **MUTATE**
#   
#  


```

