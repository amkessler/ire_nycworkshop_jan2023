---
title: "Mapping Example With Leaflet"
author: "Aaron Kessler"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
    toc: true
    toc-location: left
    theme: yeti
---

```{r setup, include=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(leaflet)
library(sf)


```



```{r}
# Create a basic map centered on Midtown Manhattan
m <- leaflet() %>% addTiles() %>% setView(lng = -73.9857, lat = 40.7638, zoom = 14)
```


```{r}
# Add a marker to the map at the location of Times Square
m %>% addMarkers(lng = -73.9858, lat = 40.7588, popup = "Times Square")
```


```{r}
# Display the map
m
```


```{r}
# Adding multiple markers to a map:

# Create a basic map centered on Midtown Manhattan
m <- leaflet() %>% addTiles() %>% setView(lng = -73.9857, lat = 40.7638, zoom = 14)

# Create a data frame with the locations and popups for multiple markers
markers <- data.frame(lng = c(-73.9858, -73.9667, -73.9729), 
                      lat = c(40.7588, 40.7850, 40.7599), 
                      popup = c("Times Square", "Central Park", "Empire State Building"))

# Add the markers to the map
m %>% addMarkers(data = markers)
```


```{r}
# Adding a layer control to toggle different map layers:

# Add a satellite layer to the map
m %>% addProviderTiles("Esri.WorldImagery", group = "Satellite")
```


```{r}
# Add a streets layer to the map
m %>% addProviderTiles("OpenStreetMap.Mapnik", group = "Streets")
```


```{r}
# Add a layer control to toggle between the satellite and streets layers
m %>% addLayersControl(overlayGroups = c("Satellite", "Streets"))
```


```{r}
# Adding a GeoJSON layer to the map:

# Read in a GeoJSON file
# We'll source one from NYC's geospatial dataset of neighborhood boundaries:
# https://www.nyc.gov/site/planning/data-maps/open-data/census-download-metadata.page

manhattan_neighborhoods <- st_read("https://services5.arcgis.com/GfwWNkhOj9bNBqoJ/arcgis/rest/services/NYC_Neighborhood_Tabulation_Areas_2020/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&f=pgeojson")
```


```{r}
# isolate just manhattan
manhattan_neighborhoods <- manhattan_neighborhoods %>% 
  filter(BoroName == "Manhattan")
```


```{r}
# Create a basic map centered on Midtown Manhattan
m <- leaflet() %>% addTiles() %>% setView(lng = -73.9857, lat = 40.7638, zoom = 14)

m
```


```{r}
# Add the GeoJSON layer to the map
m %>% addPolygons(data = manhattan_neighborhoods)
```


```{r}
# give it some color options
m %>% addPolygons(data = manhattan_neighborhoods, weight = 2, color = "white", fillOpacity = 0.7, fillColor = "blue")
```


```{r}
# Save as an option to display the map
map_neighborhoods <- m %>% addPolygons(data = manhattan_neighborhoods, weight = 2, color = "white", fillOpacity = 0.7, fillColor = "blue")

map_neighborhoods
```

Stuff to add/adapt:

```{r}



# First, let's look at LEAFLET... 
# - https://leafletjs.com/
# - https://rstudio.github.io/leaflet/

# let's make a base map in leaflet using R
leaflet() %>%
  addTiles() 

# the adding of "tiles" just means the base map design. 
# You can choose others than just the openstreetmap default
leaflet() %>% 
  addProviderTiles(providers$Stamen.TonerLite)

# now let's zoom in to just the continental US    
leaflet() %>%
  addTiles() %>%
  setView(-98.483330, 38.712046, zoom = 4)

# now that we have the basic map -- how do we add our actual data?

# First, getting rid of rows with NA values
# Using the Base R method of filtering subset() because we're dealing with a SpatialPolygonsDataFrame and not a normal data frame, thus filter() wouldn't work
states_merged_sb <- subset(states_merged_sb, !is.na(total))
states_merged_sb$total <- as.integer(states_merged_sb$total)

# Then, let's create a color palette based on the number range in the total column
mypalette <- colorNumeric("YlGn", domain=states_merged_sb$total)

# using that palette, let's add "polygons" to our map
leaflet() %>%
  addTiles() %>%
  setView(-98.483330, 38.712046, zoom = 4) %>%
  addPolygons(data = states_merged_sb,    # <--- NEW STUFF STARTS HERE
              fillColor = ~mypalette(states_merged_sb$total),
              fillOpacity = 0.9, 
              weight = 0.2)
              



#create map with hover popups

popup_sb <- paste0("Total trips: ", as.character(states_merged_sb$total))

leaflet() %>%
  addTiles() %>%
  setView(-98.483330, 38.712046, zoom = 4) %>%
  addPolygons(data = states_merged_sb , 
              fillColor = ~mypalette(states_merged_sb$total), 
              fillOpacity = 0.9, 
              weight = 0.2, 
              smoothFactor = 0.2,
              label=popup_sb,  # <--- NEW STUFF STARTS HERE
              labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "15px",
                direction = "auto")) 


# add legend

leaflet() %>%
  addTiles() %>%
  setView(-98.483330, 38.712046, zoom = 4) %>%
  addPolygons(data = states_merged_sb , 
              fillColor = ~mypalette(states_merged_sb$total), 
              fillOpacity = 0.9, 
              weight = 0.2, 
              smoothFactor = 0.2,
              label=popup_sb,
              labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "15px",
                direction = "auto")) %>%
  addLegend(pal = mypalette,    # <--- NEW STUFF STARTS HERE
            values = states_merged_sb$total,
            bins = 4,
            position = "bottomright", 
            title = "Total trips", 
            labFormat = labelFormat(digits = 0)
  )




```

